plugins {
    id 'application'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
}

java {
    sourceCompatibility = 21
    targetCompatibility = 21
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(
            'com.itextpdf:itext7-core:7.2.5',
            'org.jetbrains.kotlin:kotlin-stdlib:1.9.22'
    )

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.10.1',
            'org.jetbrains.kotlin:kotlin-test-common:1.9.22',
            'org.jetbrains.kotlin:kotlin-test:1.9.22'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    )
}

application {
    mainClassName = 'ktext.Main'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'ktext.Main'
        )
    }

    // magic to copy in all dependencies
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    // stop Exception in thread "main" java.lang.SecurityException: Invalid signature file digest for Manifest main attributes
    exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
    // stop > Entry META-INF/versions/9/module-info.class is a duplicate but no duplicate handling strategy has been set.
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }

    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
    }
}

test.finalizedBy jacocoTestReport
